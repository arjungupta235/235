<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, spUtil, $location, spModal, spAriaUtil, $http, $window) {
	var c = this;
	c.m = $scope.data.msgs;

	$scope.$on("$sp.service_catalog.cart.update", function() {
		$scope.server.update().then(function() {
			$scope.$emit("$sp.service_catalog.cart.count", getItemCount());
		});
	});

	c.updateQuantity = function(item) {
		spAriaUtil.sendLiveMessage(c.data.msgs.updatedMsq + " " + item.name + " " + c.data.msgs.quantityToMsg + " " + item.quantity);
		
		c.server.get({
			action: "update_quantity",
			itemID: item.sys_id,
			quantity: item.quantity
		}).then(function(response) {
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
		});
	}
	
	c.checkoutTwo = function() {
		c.server.get({
			cart: c.data.cart,
			disable_req_for: c.disable_req_for,
			action: "checkout_two"
		}).then(function(response) {
			var checkoutCartModalCtrl;
			var unregister = $scope.$on('$sp.service_catalog.cart.place_order', function() {
				checkoutCartModalCtrl.close();
			});

			var checkoutCartModal = angular.copy(response.data.checkoutCartModal);
			checkoutCartModal.options.afterOpen = function(ctrl){
				checkoutCartModalCtrl = ctrl;
			};
			checkoutCartModal.options.afterClose = function() {
				unregister();
				c.checkoutCartModal = null;
				checkoutCartModalCtrl = null;
			};
			c.checkoutCartModal = checkoutCartModal;
		});
	}

	c.triggerCheckout = function($evt) {
		$evt.stopPropagation();
		$evt.preventDefault();

		if (c.data.sys_properties.twostep) {
			c.checkoutTwo();
			return;
		}
		c.checkoutInProgress = true;
		c.data.action = 'checkout';
		c.server.update().then(function(response) {
			c.data.action = null;
			c.checkoutInProgress = false;
			var requestData = $scope.data.requestData;
			handleRedirect(requestData.number, requestData.table, requestData.sys_id);
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
		});
	}

	c.removeItem = function($evt, item) {
		$evt.stopPropagation();
		$evt.preventDefault();

		var urlId = $window.location.search.split('sys_id=')[1];
		if(urlId)
			urlId = urlId.split('&')[0];
		var dialogMsg = urlId === item.sys_id ? c.data.msgs.removeEditingItemMsg : c.data.msgs.removeItemConfirmationMsg;
		spModal.confirm(dialogMsg).then(function(confirmed) {
			if (confirmed) {
				$scope.server.get({
					cartName: "DEFAULT",
					action: "remove_item",
					removeItemID: item.sys_id
				}).then(function(response) {
					c.data.cart = response.data.cart;
					c.data.cartItems = response.data.cartItems;
					spAriaUtil.sendLiveMessage(item.name + " " + c.data.msgs.itemRemovedMsg);
					$rootScope.$broadcast("$sp.service_catalog.cart.update");
					if (urlId === item.sys_id)
						$window.location.href = '?id=sc_cart';
				});
			}
		});
	}

	c.clearCart = function() {
		spModal.confirm(c.data.msgs.clearCartConfirmationMsg).then(function(confirmed) {
			if (confirmed) {
				c.server.get({
					action: "clear_cart"
				}).then(function(response) {
					c.data.cart = response.data.cart;
					c.data.cartItems = response.data.cartItems
					$rootScope.$broadcast("$sp.service_catalog.cart.update");
					spUtil.addTrivialMessage(c.data.msgs.cartEmptiedMsg);
				});
			}
		});
	}
	
	c.saveBundle = function() {
		var saveCartModalCtrl;
		var unregister = $scope.$on('$sp.service_catalog.cart.save_cart', function(){
			saveCartModalCtrl.close();
		});

		var saveCartModal = angular.copy(c.data.saveCartModal);
		saveCartModal.options.afterOpen = function(ctrl){
			saveCartModalCtrl = ctrl;
		};
		saveCartModal.options.afterClose = function() {
			unregister();
			c.saveCartModal = null;
			saveCartModalCtrl = null;
		};
		c.saveCartModal = saveCartModal;
	}
	
	c.showPrice = function(idx) {
		return c.data.cartItems[idx].show_price && c.data.cartItems[idx].sys_class_name != 'sc_cat_item_producer';
	}
	
	c.showQuantity = function(idx) {
		return c.data.cartItems[idx].show_quantity && c.data.cartItems[idx].sys_class_name != 'sc_cat_item_producer';
	}
	
	c.showRecurringPrice = function(idx) {
		return c.data.cartItems[idx].show_recurring_price && c.data.cartItems[idx].sys_class_name != 'sc_cat_item_producer';
	}

	function handleRedirect(n, table, sys_id) {
		$window.location.href = '?id=sc_request&table=sc_request&sys_id=' + sys_id;
	}

	$scope.$emit("$sp.service_catalog.cart.count", getItemCount());

	function getItemCount() {
		return c.data.cartItems.length || 0;
	}
	
	if(c.options.auto_update_cart === true || c.options.auto_update_cart === "true") {
		spUtil.recordWatch($scope, 'sc_cart_item', 'cart.name=DEFAULT', function(resp) {
			$scope.$emit("$sp.service_catalog.cart.update");
			if(resp && (resp.data && resp.data.operation == "insert"))
				$scope.$emit("$sp.service_catalog.cart.add_item");
		});
        $scope.$watch("c.data.cartItems", function() {
            $scope.$emit("$sp.service_catalog.cart.count", getItemCount());
        });
    }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>td {
  vertical-align: middle !important;
}

.media-body {
  .btn-link {
    padding-left: 0;
    padding-right: 0;
    color: $primary;

    &amp;:hover {
      color: darken($primary, 10%);
    }

    &amp;:focus {
      color: darken($primary, 10%);
    }
  }
}

.btn-remove {
  font-size: 18px !important;
}

.action-btn {
  display: block;
  width: 100%;
  margin-top: 5px;

  &amp;.btn-link {
    color: $primary;
  }
}

.list-group {
  max-height: 250px;
  overflow-y: auto;
}

.list-group-item.ng-enter {
  transition: all 1s;
  -webkit-transition: all 1s;

  background-color: #c0dcfa;
}

.list-group-item.ng-enter-active {
  background-color: #fff;
}

.empty-cart {
  font-style: italic;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 7px;
}

.view-carts-link {
  text-align: center;
  display: block;
}

.order-details-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin: 5px 10px 10px 10px;

  .order-details {
    padding: 5px;

    textarea {
      resize: none;
      flex-basis: 100%;
      flex-shrink: 1;
      width: 100%;
      box-sizing: border-box;
    }
  }

  .requested-for-details {
    flex: 1 0 auto;
    max-width: 100%;
  }

  .special-instructions-details {
    textarea {
      height: calc(100% - 25px);
    }
  }
}

.item-image {
  margin-left: auto;
  margin-right: auto;
  margin-top: 10px;
}

.empty-state-content {
  margin-top: 30px;

  &amp;.small-cart {
    margin-top: 0px;
    padding: 10px 20px;
  }

  .fa-shopping-cart {
    color: $gray-light;
    font-size: 80px;
    display: block;
    text-align: center;

    &amp;.small-cart {
      font-size: 40px;
    }
  }

  .h3 {
    text-align: center;
    margin-bottom: 5px;
  }

  .h4 {
    text-align: center;
    margin-bottom: 5px;
  }

  p {
    text-align: center;
    margin-bottom: 20px;
  }

  .btn {
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 300px;
    max-width: 100%;
    margin-bottom: 35px;
  }
}

.large-checkout {
  display: inline-block;
  float: none !important;
  width: 100%;
  margin-top: 15px;
}

.item-row:hover .btn-clear {
	background-color: #f5f5f5;
}

.sc-btn {
	margin-bottom: 10px;
}

.sc-btn-group {
  clear: right;
}

.sc-remove-btn {
   &amp;:hover {
     background-color: $danger;
     color: #fff;
     border-color: darken($danger, 10%);
   }
}

.btn-group-justified &gt; .btn-group {
  	padding: 0 5px;
  	.btn {
  		border-radius: 4px !important;
    }
}

.cart-table {
  	th {
      position: sticky;
      -webkit-position: sticky;
      top: -1px;
      z-index: 10;
      background-color: $panel-bg;
      box-shadow: 0px 1px 0px $panel-inner-border;
    }
}

@media only screen and (max-width : 992px) {
  .sc-btn, .sc-btn-group {
    width: 100%;
  }
  .item-image {
    max-width: 70px;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>edge-sc-shopping-cart</id>
        <internal>false</internal>
        <link/>
        <name>Edge SC Shopping Cart</name>
        <option_schema>[{"name":"carttemplate","section":"Behavior","label":"Cart Template","type":"string"},{"hint":"This will sync cart across different sessions","name":"auto_update_cart","default_value":"false","section":"Behavior","label":"Auto update cart","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var m = data.msgs = {};
	m.createdMsg = gs.getMessage("Created");
	m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
	m.clickMsg = gs.getMessage("click here to view");
	m.cartEmptiedMsg = gs.getMessage("Your cart has been emptied");
	m.itemRemovedMsg = gs.getMessage("has been removed from your cart");
	m.updatedMsq = gs.getMessage("Updated");
	m.quantityToMsg = gs.getMessage("quantity to");
	m.removeItemConfirmationMsg = gs.getMessage("Are you sure you want to remove this item?");
	m.clearCartConfirmationMsg = gs.getMessage("Are you sure you want to empty your cart?");
	m.removeEditingItemMsg = gs.getMessage("Are you sure you want to remove the item you are viewing from your Cart?");
	var userID = gs.getUser().getID();
	var cartName = "DEFAULT";
	if ( input ) {
		if ( typeof input.cartName != "undefined" ) {
			cartName = input.cartName;
		}
	}
		
	var cartJS = new sn_sc.CartJS(cartName, '' + userID);

	data.sys_id = $sp.getParameter('sys_id');
	
	if (input && input.action === "checkout_two") {
		data.checkoutCartModal = $sp.getWidget('widget-modal', {embeddedWidgetId: 'sc-checkout', embeddedWidgetOptions: {cart: input.cart}, backdrop: 'static', keyboard: false, size: 'md'});
		return;
	}

	if (input && input.action === "update_quantity") {
		var cartItemGR = new GlideRecord("sc_cart_item");
		if (cartItemGR.get(input.itemID) && cartItemGR.canRead()) {
			cartItemGR.setValue("quantity", input.quantity);
			cartItemGR.update();
		}
	}

	if (input && input.action === "checkout") {
		var request = cartJS.checkoutCart(true);
		data.requestData = {
			number: request.request_number,
			table: 'sc_request',
			sys_id: request.request_id
		}
	}

	if (input && input.action === "remove_item") {
		cartJS.remove(input.removeItemID);
	}

	if (input && input.action === "clear_cart") {
		cartJS.empty(cartJS.getCartID());
	}

	if (input && input.action === "save_cart") {
		var newCart = new SPCart(input.newCartName, userID);
		newCart.setHidden(false);
		newCart.loadCart(cart.getCartID());
	}
	
	data.sys_properties = {
		twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true'
	};

	data.cart = cartJS.getCartDetails(true);
	data.cartItems = [];
	data.cart.recurring_subtotals = {};
	for(var key in data.cart.cart_items)
		if(typeof data.cart.cart_items[key] === 'object') {
			data.cartItems = data.cartItems.concat(data.cart.cart_items[key].items);
			if(key != '')
				data.cart.recurring_subtotals[data.cart.cart_items[key].frequency_label] = data.cart.cart_items[key].subtotal_recurring_price;
		}
	data.cartItems = data.cartItems.map(function (item) {
		item.quantity = parseInt(item.quantity);
		return item;
	})
	data.disable_req_for = sn_sc.CartJS.canViewRF();

	data.saveCartModal = $sp.getWidget('widget-modal', {embeddedWidgetId: 'sc_save_bundle', embeddedWidgetOptions: {}});

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-24 18:48:22</sys_created_on>
        <sys_id>0bddd261db451300ba2873278c96192a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Edge SC Shopping Cart</sys_name>
        <sys_package display_value="ESM Edge Portal" source="x_165710_esm_edge">a1245a69db051300ba2873278c9619f8</sys_package>
        <sys_policy/>
        <sys_scope display_value="ESM Edge Portal">a1245a69db051300ba2873278c9619f8</sys_scope>
        <sys_update_name>sp_widget_0bddd261db451300ba2873278c96192a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-24 19:30:52</sys_updated_on>
        <template><![CDATA[<div ng-if="options.cartTemplate">
	<div ng-include="options.cartTemplate"></div>

  <sp-widget widget="c.checkoutCartModal" ng-if="c.checkoutCartModal"></sp-widget>
  <sp-widget widget="c.saveCartModal" ng-if="c.saveCartModal"></sp-widget>
  
</div>

<div ng-if="!options.cartTemplate">
  <div class="alert alert-danger" role="alert">
    <strong>${Error}: </strong>
    ${Please provide a cart template to render.}
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
